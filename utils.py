# utils.py

import os
from datetime import datetime
from pathconf import BASE_PATH

_d_id = 0

def get_d_id():
    global _d_id
    return _d_id

def increase_d_id():
    global _d_id
    _d_id += 1

def reset_d_id():
    global _d_id
    _d_id = 0

def save_text_file(task_id: int, text: str, base_path = BASE_PATH if 'BASE_PATH' in globals() else 'data'):
    folder = os.path.join(base_path, datetime.now().strftime("%Y-%m-%d"), str(task_id))
    os.makedirs(folder, exist_ok=True)
    path = os.path.join(folder, f"{task_id}_text.txt")
    with open(path, "w", encoding="utf-8") as f:
        f.write(text)
    return path

def read_token():
    with open("token.txt", "r", encoding="utf-8") as f:
        return f.read().strip()

def save_rename_log(task_id: int, log_text: str, base_path = BASE_PATH if 'BASE_PATH' in globals() else 'data'):
    folder = os.path.join(base_path, datetime.now().strftime("%Y-%m-%d"), str(task_id))
    os.makedirs(folder, exist_ok=True)
    path = os.path.join(folder, "rename.txt")
    with open(path, "w", encoding="utf-8") as f:
        f.write(log_text)
    return path

def delete_task_files(task_id: int, base_path = BASE_PATH if 'BASE_PATH' in globals() else 'data'):
    folder = os.path.join(base_path, datetime.now().strftime("%Y-%m-%d"), str(task_id))
    if os.path.exists(folder):
        for root, dirs, files in os.walk(folder, topdown=False):
            for file in files:
                os.remove(os.path.join(root, file))
            for d in dirs:
                os.rmdir(os.path.join(root, d))
        os.rmdir(folder)


# utils.py

# utils.py

def build_task_card(task_id: int, user_name: str, created_at: str, full_text: str, files_list: list):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫)
    task_lines = []
    for line in full_text.split('\n'):
        if not line.startswith('data\\') and line.strip() and not any(f in line for f in files_list):
            task_lines.append(line.strip())
    cleaned_title_text = " ".join(task_lines)

    if not cleaned_title_text and files_list:
        cleaned_title_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ñ–∞–π–ª–µ"

    title = f"{task_id}. {cleaned_title_text}"[:50]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤
    task_text_parts = []
    current_text = []

    for line in full_text.split('\n'):
        if line.startswith('data\\') or any(f in line for f in [f.split(' -> ')[0] for f in files_list]):
            if current_text:
                task_text_parts.append("\n".join(current_text))
                current_text = []
            task_text_parts.append(line)
        elif line.strip():
            current_text.append(line)

    if current_text:
        task_text_parts.append("\n".join(current_text))

    task_text = "\n\n".join(task_text_parts)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    text = (
            f"üìù –î–æ–±–∞–≤–∏–ª: {user_name}\n"
            f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n"
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {title}\n\n"
            f"üìÉ –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:\n{task_text if task_text else '–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            f"üìé –§–∞–π–ª—ã:\n" + "\n".join(
                f"‚úÖ {f.split(' -> ')[0]}" if ' -> ' in f else
                f"‚ùå {f.replace('[–§–∞–π–ª –Ω–µ —Å–∫–∞—á–∞–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è]', '')} (–Ω–µ —Å–∫–∞—á–∞–Ω)"
                for f in files_list
            )
    )
    return text, title