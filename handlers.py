# handlers.py
from WEEEK import create_weeek_task
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from datetime import datetime
import os
import json

from db import create_task, update_task, get_task_column, mark_task_deleted
from loggers import log_user_friendly
from utils import (
    get_d_id, increase_d_id, reset_d_id,
    save_text_file, save_rename_log, delete_task_files,
    build_task_card
)

BASE_PATH = "data"

def register_handlers(application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO | filters.Document.ALL, collect_data))
    application.add_handler(CallbackQueryHandler(button_handler))


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    task_id = create_task()
    context.user_data['db_task_id'] = task_id
    context.user_data['messages'] = []
    context.user_data['files'] = []
    reset_d_id()

    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("–û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True)

    await update.message.reply_text(
        "üìå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, —Ñ–∞–π–ª—ã.\n"
        "–ö–æ–≥–¥–∞ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É'.\n\n"
        "–ö–Ω–æ–ø–∫–∞ '–û—Ç–º–µ–Ω–∞' —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤–≤–æ–¥, —É–¥–∞–ª—è—è —Ñ–∞–π–ª—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–∞–∫—Ç –∑–∞–¥–∞—á–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.",
        reply_markup=keyboard
    )

    log_user_friendly(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id}")


# handlers.py

async def collect_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    task_id = context.user_data.get('db_task_id')
    if not task_id:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    if update.message.text in ["–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "–û—Ç–º–µ–Ω–∞"]:
        if update.message.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É":
            await publish_task(update, context)
        else:
            await cancel_task(update, context)
        return

    rename_log = context.user_data.get('rename_log', "")
    file_entries = context.user_data.get('files', [])
    file_texts = []

    msg_text = update.message.text or ""
    has_text = bool(msg_text.strip())
    has_file = False

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if update.message.document:
        doc = update.message.document
        file = await doc.get_file()
        did = get_d_id()
        filename = f"{task_id}_{did}{os.path.splitext(doc.file_name)[1]}"
        folder = os.path.join(BASE_PATH, datetime.now().strftime("%Y-%m-%d"), str(task_id))
        os.makedirs(folder, exist_ok=True)
        path = os.path.join(folder, filename)
        await file.download_to_drive(path)
        rename_log += f"{doc.file_name} -> {filename}\n"
        file_entries.append(f"{doc.file_name} -> {path}")
        file_texts.append(doc.file_name)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        has_file = True
        increase_d_id()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    elif update.message.photo:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        did = get_d_id()
        filename = f"{task_id}_{did}.jpg"
        folder = os.path.join(BASE_PATH, datetime.now().strftime("%Y-%m-%d"), str(task_id))
        os.makedirs(folder, exist_ok=True)
        path = os.path.join(folder, filename)
        await file.download_to_drive(path)
        rename_log += f"photo_{photo.file_unique_id}.jpg -> {filename}\n"
        file_entries.append(f"photo -> {path}")
        file_texts.append("photo.jpg")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–µ–µ –∏–º—è –¥–ª—è —Ñ–æ—Ç–æ
        has_file = True
        increase_d_id()

    if has_text or has_file:
        entry = msg_text.strip()
        if file_texts:
            entry += "\n" + "\n".join(file_texts)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        context.user_data['messages'].append(entry)

    context.user_data['rename_log'] = rename_log
    context.user_data['files'] = file_entries

    log_user_friendly(f"üì® –ü—Ä–∏–Ω—è—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.full_name}. –¢–µ–∫—Å—Ç: {msg_text or '[–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞]'}")


# handlers.py (–∏–∑–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é publish_task)

async def publish_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task_id = context.user_data.get('db_task_id')
    if not task_id:
        await update.message.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É.")
        return

    user = update.effective_user
    user_id = user.id
    user_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
    full_text = "\n\n".join(context.user_data.get('messages', [])) or "[—Ç–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω]"
    files = context.user_data.get('files', [])
    rename_log = context.user_data.get('rename_log', "–§–∞–π–ª—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–ª–∏—Å—å")

    created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    files_json = json.dumps({
        "file_count": len(files),
        "doc_ids": [],
        "photo_ids": [],
        "rename_log": rename_log
    }, ensure_ascii=False, indent=2)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    update_task(task_id, "user_id", user_id)
    update_task(task_id, "user_name", user_name)
    update_task(task_id, "created_at", created_at)
    update_task(task_id, "full_text", full_text)
    update_task(task_id, "files_json", files_json)
    update_task(task_id, "sost", "sucsessefully_publeshed")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ª–æ–≥
    text_file_path = save_text_file(task_id, full_text)
    save_rename_log(task_id, rename_log)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á–∏
    task_card = build_task_card(
        task_id, f"<a href='tg://user?id={user_id}'>{user_name}</a>", created_at, full_text, files
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è WEEEK
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è WEEEK
    weeek_title = full_text.split('\n')[0].strip()[:100]

    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –æ—Ç –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
    task_text_lines = []
    for line in full_text.split('\n'):
        if not line.startswith('data\\') and line.strip():
            task_text_lines.append(line)
    cleaned_task_text = "\n".join(task_text_lines)

    # –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª—è—Ö
    weeek_description = cleaned_task_text

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ WEEEK
    try:
        weeek_task_id = await create_weeek_task(
            title=weeek_title,
            description=weeek_description,
            files_info=rename_log
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ WEEEK –≤ –Ω–∞—à—É –±–∞–∑—É
        update_task(task_id, "weeek_task_id", str(weeek_task_id))
        log_user_friendly(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} —Å–æ–∑–¥–∞–Ω–∞ –≤ WEEEK —Å ID {weeek_task_id}")
    except Exception as e:
        log_user_friendly(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ WEEEK: {str(e)}")
        await update.message.reply_text(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ WEEEK: {str(e)}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:\n\n{task_card}", parse_mode="HTML")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
    try:
        with open("Admin_chat.txt", "r", encoding="utf-8") as f:
            admin_chat_id = int(f.read().strip())
        await context.bot.send_message(admin_chat_id, f"üì• –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞:\n\n{task_card}", parse_mode="HTML")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

    log_user_friendly(f"üì¶ –ó–∞–¥–∞—á–∞ {task_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")

    # –°–±—Ä–æ—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
    await start(update, context)


async def cancel_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task_id = context.user_data.get('db_task_id')
    mark_task_deleted(task_id)
    delete_task_files(task_id)
    await update.message.reply_text("üö´ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–≤–æ–¥ —Å–±—Ä–æ—à–µ–Ω.")
    log_user_friendly(f"üóë –ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ –æ—á–∏—â–µ–Ω—ã —Ñ–∞–π–ª—ã.")

    # –°–±—Ä–æ—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
    await start(update, context)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
